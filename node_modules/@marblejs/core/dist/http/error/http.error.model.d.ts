import { HttpStatus, HttpRequest } from '../http.interface';
import { NamedError } from '../../+internal/utils';
import { HttpEffectResponse } from '../effects/http.effects.interface';
export declare enum HttpErrorType {
    HTTP_ERROR = "HttpError",
    HTTP_REQUEST_ERROR = "HttpRequestError"
}
export declare class HttpError extends NamedError {
    readonly message: string;
    readonly status: HttpStatus;
    readonly data?: any[] | Record<string, unknown> | undefined;
    readonly request?: HttpRequest<unknown, unknown, unknown> | undefined;
    readonly context?: string | undefined;
    constructor(message: string, status: HttpStatus, data?: any[] | Record<string, unknown> | undefined, request?: HttpRequest<unknown, unknown, unknown> | undefined, context?: string | undefined);
}
export declare class HttpRequestError extends NamedError {
    readonly request: HttpRequest;
    readonly error: Error;
    constructor(request: HttpRequest, error: Error);
}
export declare const isHttpError: (error: Error | undefined) => error is HttpError;
export declare const isHttpRequestError: (error: Error | undefined) => error is HttpRequestError;
export declare const unexpectedErrorWhileSendingErrorFactory: (error: Error) => import("../..").CoreError;
export declare const unexpectedErrorWhileSendingOutputFactory: (error: Error) => import("../..").CoreError;
export declare const responseNotBoundToRequestErrorFactory: (response: HttpEffectResponse) => import("../..").CoreError;
export declare const errorNotBoundToRequestErrorFactory: (error: Error) => import("../..").CoreError;
//# sourceMappingURL=http.error.model.d.ts.map