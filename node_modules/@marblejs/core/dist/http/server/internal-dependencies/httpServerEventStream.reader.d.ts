/// <reference types="node" />
import * as http from 'http';
import * as net from 'net';
import { HttpServer } from '../../http.interface';
import { ServerEventType } from '../http.server.event';
declare type HttpServerEventStreamOptions = {
    server: HttpServer;
    hostname?: string;
};
export declare const HttpServerEventStreamToken: {
    _id: string;
    _T: import("rxjs").Observable<{
        type: ServerEventType.CONNECT;
        payload: {
            request: http.IncomingMessage;
            socket: net.Socket;
            head: Buffer;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.CONNECTION;
        payload: {
            socket: net.Socket;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.CLIENT_ERROR;
        payload: {
            error: Error;
            socket: net.Socket;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.CLOSE;
        payload: unknown;
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.CHECK_CONTINUE;
        payload: {
            request: http.IncomingMessage;
            response: http.ServerResponse;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.CHECK_EXPECTATION;
        payload: {
            request: http.IncomingMessage;
            response: http.ServerResponse;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.ERROR;
        payload: {
            error: Error;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.REQUEST;
        payload: {
            request: http.IncomingMessage;
            response: http.ServerResponse;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.UPGRADE;
        payload: {
            request: http.IncomingMessage;
            socket: net.Socket;
            head: Buffer;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    } | {
        type: ServerEventType.LISTENING;
        payload: {
            port: number;
            host: string;
        };
        metadata?: import("../../..").EventMetadata | undefined;
    }>;
    name?: string | undefined;
};
/**
 * HTTP server event stream reader responsible for subscribing to raw Node.js HTTP server events
 * and giving them in normalized Observable form
 */
export declare const HttpServerEventStream: (opts: HttpServerEventStreamOptions) => import("fp-ts/lib/Reader").Reader<import("../../..").Context, import("rxjs").Observable<{
    type: ServerEventType.CONNECT;
    payload: {
        request: http.IncomingMessage;
        socket: net.Socket;
        head: Buffer;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.CONNECTION;
    payload: {
        socket: net.Socket;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.CLIENT_ERROR;
    payload: {
        error: Error;
        socket: net.Socket;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.CLOSE;
    payload: unknown;
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.CHECK_CONTINUE;
    payload: {
        request: http.IncomingMessage;
        response: http.ServerResponse;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.CHECK_EXPECTATION;
    payload: {
        request: http.IncomingMessage;
        response: http.ServerResponse;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.ERROR;
    payload: {
        error: Error;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.REQUEST;
    payload: {
        request: http.IncomingMessage;
        response: http.ServerResponse;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.UPGRADE;
    payload: {
        request: http.IncomingMessage;
        socket: net.Socket;
        head: Buffer;
    };
    metadata?: import("../../..").EventMetadata | undefined;
} | {
    type: ServerEventType.LISTENING;
    payload: {
        port: number;
        host: string;
    };
    metadata?: import("../../..").EventMetadata | undefined;
}>>;
export {};
//# sourceMappingURL=httpServerEventStream.reader.d.ts.map