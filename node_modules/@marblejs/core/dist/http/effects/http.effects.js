"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.close$ = exports.error$ = exports.listening$ = void 0;
const operators_1 = require("rxjs/operators");
const http_server_event_1 = require("../server/http.server.event");
const matchEvent_operator_1 = require("../../operators/matchEvent/matchEvent.operator");
const context_hook_1 = require("../../context/context.hook");
const logger_1 = require("../../logger");
exports.listening$ = (event$, ctx) => {
    const logger = context_hook_1.useContext(logger_1.LoggerToken)(ctx.ask);
    return event$.pipe(matchEvent_operator_1.matchEvent(http_server_event_1.ServerEvent.listening), operators_1.map(event => event.payload), operators_1.tap(({ host, port }) => {
        const message = `Server running @ http://${host}:${port}/ ðŸš€`;
        const log = logger({ tag: "http" /* HTTP */, level: logger_1.LoggerLevel.INFO, type: 'Server', message });
        log();
    }));
};
exports.error$ = (event$, ctx) => {
    const logger = context_hook_1.useContext(logger_1.LoggerToken)(ctx.ask);
    return event$.pipe(matchEvent_operator_1.matchEvent(http_server_event_1.ServerEvent.error), operators_1.map(event => event.payload), operators_1.tap(({ error }) => {
        const message = `Unexpected server error occured: "${error.name}", "${error.message}"`;
        const log = logger({ tag: "http" /* HTTP */, level: logger_1.LoggerLevel.ERROR, type: 'Server', message });
        log();
    }));
};
exports.close$ = (event$, ctx) => {
    const logger = context_hook_1.useContext(logger_1.LoggerToken)(ctx.ask);
    return event$.pipe(matchEvent_operator_1.matchEvent(http_server_event_1.ServerEvent.close), operators_1.map(event => event.payload), operators_1.tap(() => {
        const message = `Server connection was closed`;
        const log = logger({ tag: "http" /* HTTP */, level: logger_1.LoggerLevel.INFO, type: 'Server', message });
        log();
    }));
};
