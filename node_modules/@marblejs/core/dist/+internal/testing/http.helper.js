"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHttpServerTestBed = exports.createTestRoute = exports.createMockEffectContext = exports.createHttpResponse = exports.createHttpRequest = void 0;
const http = require("http");
const events_1 = require("events");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const context_1 = require("../../context/context");
const effectsContext_factory_1 = require("../../effects/effectsContext.factory");
const http_server_tokens_1 = require("../../http/server/http.server.tokens");
const logger_1 = require("../../logger");
const http_router_params_factory_1 = require("../../http/router/http.router.params.factory");
exports.createHttpRequest = (data) => Object.assign({}, {
    url: '/',
    method: 'GET',
    headers: {},
    query: {},
    params: {},
    meta: {},
    response: exports.createHttpResponse(),
}, data);
exports.createHttpResponse = (data = {}) => new class extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        this.statusCode = data.statusCode;
        this.writeHead = jest.fn();
        this.setHeader = jest.fn();
        this.getHeader = jest.fn();
        this.end = jest.fn();
        this.send = jest.fn();
    }
};
exports.createMockEffectContext = () => {
    const dependencies = [
        context_1.bindTo(logger_1.LoggerToken)(logger_1.mockLogger),
        context_1.bindTo(http_server_tokens_1.HttpRequestBusToken)(() => new rxjs_1.Subject()),
        context_1.bindTo(http_server_tokens_1.HttpServerClientToken)(() => http.createServer()),
    ];
    const context = context_1.registerAll(dependencies)(context_1.createContext());
    const client = http.createServer();
    return effectsContext_factory_1.createEffectContext({ ask: context_1.lookup(context), client });
};
exports.createTestRoute = (opts) => {
    var _a, _b;
    const method = (_a = opts === null || opts === void 0 ? void 0 : opts.method) !== null && _a !== void 0 ? _a : 'GET';
    const routeDelay = (_b = opts === null || opts === void 0 ? void 0 : opts.delay) !== null && _b !== void 0 ? _b : 0;
    const req = exports.createHttpRequest(({ url: `/delay_${routeDelay}`, method }));
    const path = http_router_params_factory_1.factorizeRegExpWithParams(`/delay_${routeDelay}`);
    const effect = req$ => req$.pipe(operators_1.delay(routeDelay), operators_1.tap(() => { if (opts === null || opts === void 0 ? void 0 : opts.throwError)
        throw new Error(); }), operators_1.mapTo({ body: `delay_${routeDelay}` }));
    const item = {
        regExp: path.regExp,
        path: path.path,
        methods: { [method]: { effect, middlewares: [] } },
    };
    return { req, path, effect, item };
};
/**
 * @deprecated
 */
exports.createHttpServerTestBed = (server) => {
    let httpServer;
    const getInstance = () => httpServer;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        const app = yield server;
        httpServer = yield app();
    }));
    afterAll(done => {
        httpServer.close(done);
    });
    return {
        getInstance,
    };
};
