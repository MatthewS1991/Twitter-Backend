"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contextFactory = exports.constructContext = void 0;
const T = require("fp-ts/lib/Task");
const O = require("fp-ts/lib/Option");
const pipeable_1 = require("fp-ts/lib/pipeable");
const function_1 = require("fp-ts/lib/function");
const logger_1 = require("../logger");
const utils_1 = require("../+internal/utils");
const context_1 = require("./context");
/**
 * `INTERNAL` - unregisters redundant token if available in DerivedContext
 * @since v3.4.0
 */
const unregisterRedundantToken = (token) => (context) => pipeable_1.pipe(context_1.lookup(context)(context_1.DerivedContextToken), O.chain(derivedContext => context_1.lookup(derivedContext)(token)), O.fold(function_1.constant(context), () => context_1.unregister(token)(context)));
/**
 * Constructs and resolves a new or derived context based on provided dependencies
 * @since v3.4.0
 */
exports.constructContext = (context) => (...dependencies) => pipeable_1.pipe(context !== null && context !== void 0 ? context : context_1.createContext(), context_1.registerAll([
    context_1.bindTo(logger_1.LoggerToken)(utils_1.isTestEnv() ? logger_1.mockLogger : logger_1.logger),
    ...dependencies,
]), context => () => context_1.resolve(context), T.map(unregisterRedundantToken(logger_1.LoggerToken)))();
/**
 * Constructs and resolves a new context based on provided dependencies
 * @since v3.2.0
 */
exports.contextFactory = exports.constructContext();
